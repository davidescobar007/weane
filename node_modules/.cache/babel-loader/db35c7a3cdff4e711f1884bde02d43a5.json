{"ast":null,"code":"// Copyright 2015 Joyent, Inc.\nvar assert = require('assert-plus');\n\nvar crypto = require('crypto');\n\nvar sshpk = require('sshpk');\n\nvar utils = require('./utils');\n\nvar HASH_ALGOS = utils.HASH_ALGOS;\nvar PK_ALGOS = utils.PK_ALGOS;\nvar InvalidAlgorithmError = utils.InvalidAlgorithmError;\nvar HttpSignatureError = utils.HttpSignatureError;\nvar validateAlgorithm = utils.validateAlgorithm; ///--- Exported API\n\nmodule.exports = {\n  /**\r\n   * Verify RSA/DSA signature against public key.  You are expected to pass in\r\n   * an object that was returned from `parse()`.\r\n   *\r\n   * @param {Object} parsedSignature the object you got from `parse`.\r\n   * @param {String} pubkey RSA/DSA private key PEM.\r\n   * @return {Boolean} true if valid, false otherwise.\r\n   * @throws {TypeError} if you pass in bad arguments.\r\n   * @throws {InvalidAlgorithmError}\r\n   */\n  verifySignature: function verifySignature(parsedSignature, pubkey) {\n    assert.object(parsedSignature, 'parsedSignature');\n    if (typeof pubkey === 'string' || Buffer.isBuffer(pubkey)) pubkey = sshpk.parseKey(pubkey);\n    assert.ok(sshpk.Key.isKey(pubkey, [1, 1]), 'pubkey must be a sshpk.Key');\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] === 'hmac' || alg[0] !== pubkey.type) return false;\n    var v = pubkey.createVerify(alg[1]);\n    v.update(parsedSignature.signingString);\n    return v.verify(parsedSignature.params.signature, 'base64');\n  },\n\n  /**\r\n   * Verify HMAC against shared secret.  You are expected to pass in an object\r\n   * that was returned from `parse()`.\r\n   *\r\n   * @param {Object} parsedSignature the object you got from `parse`.\r\n   * @param {String} secret HMAC shared secret.\r\n   * @return {Boolean} true if valid, false otherwise.\r\n   * @throws {TypeError} if you pass in bad arguments.\r\n   * @throws {InvalidAlgorithmError}\r\n   */\n  verifyHMAC: function verifyHMAC(parsedSignature, secret) {\n    assert.object(parsedSignature, 'parsedHMAC');\n    assert.string(secret, 'secret');\n    var alg = validateAlgorithm(parsedSignature.algorithm);\n    if (alg[0] !== 'hmac') return false;\n    var hashAlg = alg[1].toUpperCase();\n    var hmac = crypto.createHmac(hashAlg, secret);\n    hmac.update(parsedSignature.signingString);\n    /*\r\n     * Now double-hash to avoid leaking timing information - there's\r\n     * no easy constant-time compare in JS, so we use this approach\r\n     * instead. See for more info:\r\n     * https://www.isecpartners.com/blog/2011/february/double-hmac-\r\n     * verification.aspx\r\n     */\n\n    var h1 = crypto.createHmac(hashAlg, secret);\n    h1.update(hmac.digest());\n    h1 = h1.digest();\n    var h2 = crypto.createHmac(hashAlg, secret);\n    h2.update(new Buffer(parsedSignature.params.signature, 'base64'));\n    h2 = h2.digest();\n    /* Node 0.8 returns strings from .digest(). */\n\n    if (typeof h1 === 'string') return h1 === h2;\n    /* And node 0.10 lacks the .equals() method on Buffers. */\n\n    if (Buffer.isBuffer(h1) && !h1.equals) return h1.toString('binary') === h2.toString('binary');\n    return h1.equals(h2);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}