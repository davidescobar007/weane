{"ast":null,"code":"/*\r\n * verror.js: richer JavaScript errors\r\n */\nvar mod_assertplus = require('assert-plus');\n\nvar mod_util = require('util');\n\nvar mod_extsprintf = require('extsprintf');\n\nvar mod_isError = require('core-util-is').isError;\n\nvar sprintf = mod_extsprintf.sprintf;\n/*\r\n * Public interface\r\n */\n\n/* So you can 'var VError = require('verror')' */\n\nmodule.exports = VError;\n/* For compatibility */\n\nVError.VError = VError;\n/* Other exported classes */\n\nVError.SError = SError;\nVError.WError = WError;\nVError.MultiError = MultiError;\n/*\r\n * Common function used to parse constructor arguments for VError, WError, and\r\n * SError.  Named arguments to this function:\r\n *\r\n *     strict\t\tforce strict interpretation of sprintf arguments, even\r\n *     \t\t\tif the options in \"argv\" don't say so\r\n *\r\n *     argv\t\terror's constructor arguments, which are to be\r\n *     \t\t\tinterpreted as described in README.md.  For quick\r\n *     \t\t\treference, \"argv\" has one of the following forms:\r\n *\r\n *          [ sprintf_args... ]           (argv[0] is a string)\r\n *          [ cause, sprintf_args... ]    (argv[0] is an Error)\r\n *          [ options, sprintf_args... ]  (argv[0] is an object)\r\n *\r\n * This function normalizes these forms, producing an object with the following\r\n * properties:\r\n *\r\n *    options           equivalent to \"options\" in third form.  This will never\r\n *    \t\t\tbe a direct reference to what the caller passed in\r\n *    \t\t\t(i.e., it may be a shallow copy), so it can be freely\r\n *    \t\t\tmodified.\r\n *\r\n *    shortmessage      result of sprintf(sprintf_args), taking options.strict\r\n *    \t\t\tinto account as described in README.md.\r\n */\n\nfunction parseConstructorArguments(args) {\n  var argv, options, sprintf_args, shortmessage, k;\n  mod_assertplus.object(args, 'args');\n  mod_assertplus.bool(args.strict, 'args.strict');\n  mod_assertplus.array(args.argv, 'args.argv');\n  argv = args.argv;\n  /*\r\n   * First, figure out which form of invocation we've been given.\r\n   */\n\n  if (argv.length === 0) {\n    options = {};\n    sprintf_args = [];\n  } else if (mod_isError(argv[0])) {\n    options = {\n      'cause': argv[0]\n    };\n    sprintf_args = argv.slice(1);\n  } else if (typeof argv[0] === 'object') {\n    options = {};\n\n    for (k in argv[0]) {\n      options[k] = argv[0][k];\n    }\n\n    sprintf_args = argv.slice(1);\n  } else {\n    mod_assertplus.string(argv[0], 'first argument to VError, SError, or WError ' + 'constructor must be a string, object, or Error');\n    options = {};\n    sprintf_args = argv;\n  }\n  /*\r\n   * Now construct the error's message.\r\n   *\r\n   * extsprintf (which we invoke here with our caller's arguments in order\r\n   * to construct this Error's message) is strict in its interpretation of\r\n   * values to be processed by the \"%s\" specifier.  The value passed to\r\n   * extsprintf must actually be a string or something convertible to a\r\n   * String using .toString().  Passing other values (notably \"null\" and\r\n   * \"undefined\") is considered a programmer error.  The assumption is\r\n   * that if you actually want to print the string \"null\" or \"undefined\",\r\n   * then that's easy to do that when you're calling extsprintf; on the\r\n   * other hand, if you did NOT want that (i.e., there's actually a bug\r\n   * where the program assumes some variable is non-null and tries to\r\n   * print it, which might happen when constructing a packet or file in\r\n   * some specific format), then it's better to stop immediately than\r\n   * produce bogus output.\r\n   *\r\n   * However, sometimes the bug is only in the code calling VError, and a\r\n   * programmer might prefer to have the error message contain \"null\" or\r\n   * \"undefined\" rather than have the bug in the error path crash the\r\n   * program (making the first bug harder to identify).  For that reason,\r\n   * by default VError converts \"null\" or \"undefined\" arguments to their\r\n   * string representations and passes those to extsprintf.  Programmers\r\n   * desiring the strict behavior can use the SError class or pass the\r\n   * \"strict\" option to the VError constructor.\r\n   */\n\n\n  mod_assertplus.object(options);\n\n  if (!options.strict && !args.strict) {\n    sprintf_args = sprintf_args.map(function (a) {\n      return a === null ? 'null' : a === undefined ? 'undefined' : a;\n    });\n  }\n\n  if (sprintf_args.length === 0) {\n    shortmessage = '';\n  } else {\n    shortmessage = sprintf.apply(null, sprintf_args);\n  }\n\n  return {\n    'options': options,\n    'shortmessage': shortmessage\n  };\n}\n/*\r\n * See README.md for reference documentation.\r\n */\n\n\nfunction VError() {\n  var args, obj, parsed, cause, ctor, message, k;\n  args = Array.prototype.slice.call(arguments, 0);\n  /*\r\n   * This is a regrettable pattern, but JavaScript's built-in Error class\r\n   * is defined to work this way, so we allow the constructor to be called\r\n   * without \"new\".\r\n   */\n\n  if (!(this instanceof VError)) {\n    obj = Object.create(VError.prototype);\n    VError.apply(obj, arguments);\n    return obj;\n  }\n  /*\r\n   * For convenience and backwards compatibility, we support several\r\n   * different calling forms.  Normalize them here.\r\n   */\n\n\n  parsed = parseConstructorArguments({\n    'argv': args,\n    'strict': false\n  });\n  /*\r\n   * If we've been given a name, apply it now.\r\n   */\n\n  if (parsed.options.name) {\n    mod_assertplus.string(parsed.options.name, 'error\\'s \"name\" must be a string');\n    this.name = parsed.options.name;\n  }\n  /*\r\n   * For debugging, we keep track of the original short message (attached\r\n   * this Error particularly) separately from the complete message (which\r\n   * includes the messages of our cause chain).\r\n   */\n\n\n  this.jse_shortmsg = parsed.shortmessage;\n  message = parsed.shortmessage;\n  /*\r\n   * If we've been given a cause, record a reference to it and update our\r\n   * message appropriately.\r\n   */\n\n  cause = parsed.options.cause;\n\n  if (cause) {\n    mod_assertplus.ok(mod_isError(cause), 'cause is not an Error');\n    this.jse_cause = cause;\n\n    if (!parsed.options.skipCauseMessage) {\n      message += ': ' + cause.message;\n    }\n  }\n  /*\r\n   * If we've been given an object with properties, shallow-copy that\r\n   * here.  We don't want to use a deep copy in case there are non-plain\r\n   * objects here, but we don't want to use the original object in case\r\n   * the caller modifies it later.\r\n   */\n\n\n  this.jse_info = {};\n\n  if (parsed.options.info) {\n    for (k in parsed.options.info) {\n      this.jse_info[k] = parsed.options.info[k];\n    }\n  }\n\n  this.message = message;\n  Error.call(this, message);\n\n  if (Error.captureStackTrace) {\n    ctor = parsed.options.constructorOpt || this.constructor;\n    Error.captureStackTrace(this, ctor);\n  }\n\n  return this;\n}\n\nmod_util.inherits(VError, Error);\nVError.prototype.name = 'VError';\n\nVError.prototype.toString = function ve_toString() {\n  var str = this.hasOwnProperty('name') && this.name || this.constructor.name || this.constructor.prototype.name;\n  if (this.message) str += ': ' + this.message;\n  return str;\n};\n/*\r\n * This method is provided for compatibility.  New callers should use\r\n * VError.cause() instead.  That method also uses the saner `null` return value\r\n * when there is no cause.\r\n */\n\n\nVError.prototype.cause = function ve_cause() {\n  var cause = VError.cause(this);\n  return cause === null ? undefined : cause;\n};\n/*\r\n * Static methods\r\n *\r\n * These class-level methods are provided so that callers can use them on\r\n * instances of Errors that are not VErrors.  New interfaces should be provided\r\n * only using static methods to eliminate the class of programming mistake where\r\n * people fail to check whether the Error object has the corresponding methods.\r\n */\n\n\nVError.cause = function (err) {\n  mod_assertplus.ok(mod_isError(err), 'err must be an Error');\n  return mod_isError(err.jse_cause) ? err.jse_cause : null;\n};\n\nVError.info = function (err) {\n  var rv, cause, k;\n  mod_assertplus.ok(mod_isError(err), 'err must be an Error');\n  cause = VError.cause(err);\n\n  if (cause !== null) {\n    rv = VError.info(cause);\n  } else {\n    rv = {};\n  }\n\n  if (typeof err.jse_info == 'object' && err.jse_info !== null) {\n    for (k in err.jse_info) {\n      rv[k] = err.jse_info[k];\n    }\n  }\n\n  return rv;\n};\n\nVError.findCauseByName = function (err, name) {\n  var cause;\n  mod_assertplus.ok(mod_isError(err), 'err must be an Error');\n  mod_assertplus.string(name, 'name');\n  mod_assertplus.ok(name.length > 0, 'name cannot be empty');\n\n  for (cause = err; cause !== null; cause = VError.cause(cause)) {\n    mod_assertplus.ok(mod_isError(cause));\n\n    if (cause.name == name) {\n      return cause;\n    }\n  }\n\n  return null;\n};\n\nVError.hasCauseWithName = function (err, name) {\n  return VError.findCauseByName(err, name) !== null;\n};\n\nVError.fullStack = function (err) {\n  mod_assertplus.ok(mod_isError(err), 'err must be an Error');\n  var cause = VError.cause(err);\n\n  if (cause) {\n    return err.stack + '\\ncaused by: ' + VError.fullStack(cause);\n  }\n\n  return err.stack;\n};\n\nVError.errorFromList = function (errors) {\n  mod_assertplus.arrayOfObject(errors, 'errors');\n\n  if (errors.length === 0) {\n    return null;\n  }\n\n  errors.forEach(function (e) {\n    mod_assertplus.ok(mod_isError(e));\n  });\n\n  if (errors.length == 1) {\n    return errors[0];\n  }\n\n  return new MultiError(errors);\n};\n\nVError.errorForEach = function (err, func) {\n  mod_assertplus.ok(mod_isError(err), 'err must be an Error');\n  mod_assertplus.func(func, 'func');\n\n  if (err instanceof MultiError) {\n    err.errors().forEach(function iterError(e) {\n      func(e);\n    });\n  } else {\n    func(err);\n  }\n};\n/*\r\n * SError is like VError, but stricter about types.  You cannot pass \"null\" or\r\n * \"undefined\" as string arguments to the formatter.\r\n */\n\n\nfunction SError() {\n  var args, obj, parsed, options;\n  args = Array.prototype.slice.call(arguments, 0);\n\n  if (!(this instanceof SError)) {\n    obj = Object.create(SError.prototype);\n    SError.apply(obj, arguments);\n    return obj;\n  }\n\n  parsed = parseConstructorArguments({\n    'argv': args,\n    'strict': true\n  });\n  options = parsed.options;\n  VError.call(this, options, '%s', parsed.shortmessage);\n  return this;\n}\n/*\r\n * We don't bother setting SError.prototype.name because once constructed,\r\n * SErrors are just like VErrors.\r\n */\n\n\nmod_util.inherits(SError, VError);\n/*\r\n * Represents a collection of errors for the purpose of consumers that generally\r\n * only deal with one error.  Callers can extract the individual errors\r\n * contained in this object, but may also just treat it as a normal single\r\n * error, in which case a summary message will be printed.\r\n */\n\nfunction MultiError(errors) {\n  mod_assertplus.array(errors, 'list of errors');\n  mod_assertplus.ok(errors.length > 0, 'must be at least one error');\n  this.ase_errors = errors;\n  VError.call(this, {\n    'cause': errors[0]\n  }, 'first of %d error%s', errors.length, errors.length == 1 ? '' : 's');\n}\n\nmod_util.inherits(MultiError, VError);\nMultiError.prototype.name = 'MultiError';\n\nMultiError.prototype.errors = function me_errors() {\n  return this.ase_errors.slice(0);\n};\n/*\r\n * See README.md for reference details.\r\n */\n\n\nfunction WError() {\n  var args, obj, parsed, options;\n  args = Array.prototype.slice.call(arguments, 0);\n\n  if (!(this instanceof WError)) {\n    obj = Object.create(WError.prototype);\n    WError.apply(obj, args);\n    return obj;\n  }\n\n  parsed = parseConstructorArguments({\n    'argv': args,\n    'strict': false\n  });\n  options = parsed.options;\n  options['skipCauseMessage'] = true;\n  VError.call(this, options, '%s', parsed.shortmessage);\n  return this;\n}\n\nmod_util.inherits(WError, VError);\nWError.prototype.name = 'WError';\n\nWError.prototype.toString = function we_toString() {\n  var str = this.hasOwnProperty('name') && this.name || this.constructor.name || this.constructor.prototype.name;\n  if (this.message) str += ': ' + this.message;\n  if (this.jse_cause && this.jse_cause.message) str += '; caused by ' + this.jse_cause.toString();\n  return str;\n};\n/*\r\n * For purely historical reasons, WError's cause() function allows you to set\r\n * the cause.\r\n */\n\n\nWError.prototype.cause = function we_cause(c) {\n  if (mod_isError(c)) this.jse_cause = c;\n  return this.jse_cause;\n};","map":null,"metadata":{},"sourceType":"script"}